{"version":3,"sources":["components/CountryLatestNumbers.module.scss","components/CountryTotalNumbers.module.scss","components/NavBar.module.scss","App.module.scss","pages/About.module.scss","components/CountryTable.module.scss","components/CountryFeed.module.scss","components/MonthTrendChart.module.scss","pages/Home.module.scss","pages/Country.module.scss","components/SearchBar.module.scss","env.ts","services/api.service.ts","utils/formatData.ts","models/country.ts","models/global.ts","pages/About.tsx","components/CountryTable.tsx","components/CountryLatestNumbers.tsx","components/CountryFeed.tsx","components/CountryTotalNumbers.tsx","components/NavBar.tsx","components/SearchBar.tsx","components/MonthTrendChart.tsx","pages/Home.tsx","pages/Country.tsx","App.tsx","index.tsx"],"names":["module","exports","EnvType","serverEnvironments","Local","apiUrl","Development","Staging","Production","Env","process","__DEV__","serverEnv","ApiService","request","method","response","humps","camelizeKeys","console","log","slug","status","fromDate","moment","startOf","subtract","toISOString","toDate","params","from","to","formatWeekTrendData","confirmed","deaths","data","i","name","country","length","date","format","Math","abs","cases","initialState","countrySlug","countryName","sortVisible","monthSummary","namespace","state","effects","fetchMonthSummary","payload","call","put","type","getCountrySummary","result","activateSort","action","reducers","setCountrySlug","setCountryName","setMonthSummary","setSortVisible","setDefault","summary","newConfirmed","totalConfirmed","newDeaths","totalDeaths","newRecovered","totalRecovered","countries","searchResults","countrySummary","fetchSummary","getSummary","global","sortCountries","select","key","searchCountry","results","fetchCountrySummary","setSummary","setCountries","setSearchResult","setCountryResult","About","className","styles","page","title","bordered","style","width","columns","dataIndex","render","text","record","valueStyle","fontSize","prefix","src","countryCode","loading","height","alt","value","CountryTable","props","viewCountryDetails","useState","tableItems","setTableItems","formatTableCB","useCallback","items","useEffect","countryList","dataSource","pagination","position","showLessItems","showSizeChanger","onRow","rowIndex","onClick","Text","CountryLatestNumbers","item","statItems","statItem","CountryTotalNumbers","Title","connect","globalSummary","countrySearch","lastUpdated","dispatch","routerRedux","push","filterCountries","navBar","navTitle","level","viewSelected","Option","sortOptions","SearchBar","setResult","searchValue","setSearchValue","sortKey","setSortKey","searchSection","searchBar","searchInput","onSearch","onSelect","find","element","handleSelected","placeholder","map","nameSection","nameText","sortSection","sortText","defaultValue","onChange","sortOption","MonthTrendChart","chart","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","strokeDasharray","stroke","fillOpacity","fill","enableSort","routing","countryUrl","location","pathname","getMonthSummary","countryInfo","setCountryInfo","detailSection","infoSection","flag","numbersSection","details","numbers","trend","Header","Content","ConnectedRouter","history","container","zIndex","padding","content","exact","path","middleware","createLogger","app","dva","createBrowserHistory","onError","error","preventDefault","message","onAction","use","createLoading","router","model","Global","Country","start"],"mappings":"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","file":"static/js/main.6a816ef0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CountryLatestNumbers_item__WdMVf\",\"statItems\":\"CountryLatestNumbers_statItems__XC1_w\",\"statItem\":\"CountryLatestNumbers_statItem__1WG1D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CountryTotalNumbers_item__2ZgoF\",\"statItems\":\"CountryTotalNumbers_statItems__2hYN8\",\"statItem\":\"CountryTotalNumbers_statItem__h_ATf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBar\":\"NavBar_navBar__3h6Ps\",\"navTitle\":\"NavBar_navTitle__1KSfe\",\"navMenu\":\"NavBar_navMenu__3RHO4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__eSJ6i\",\"menu\":\"App_menu__z3ViC\",\"content\":\"App_content__1Wt3K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"About_page__1q3wP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countryList\":\"CountryTable_countryList__2KJ6c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"timeline\":\"CountryFeed_timeline__2ObME\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart\":\"MonthTrendChart_chart__1lZtC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Home_page__1ktDl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Country_page__2j6Hk\",\"title\":\"Country_title__3bcz2\",\"details\":\"Country_details__3C-O7\",\"detailSection\":\"Country_detailSection__3FmG9\",\"infoSection\":\"Country_infoSection__2CLjK\",\"numbersSection\":\"Country_numbersSection__aOMlW\",\"flag\":\"Country_flag__mY_0C\",\"numbers\":\"Country_numbers__1QMuz\",\"trend\":\"Country_trend__1piJ4\",\"timeline\":\"Country_timeline__Zo2DP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchSection\":\"SearchBar_searchSection__xwFR5\",\"searchBar\":\"SearchBar_searchBar__2gF1z\",\"sortSection\":\"SearchBar_sortSection__1qPGb\",\"sortText\":\"SearchBar_sortText__2pCKk\",\"select\":\"SearchBar_select__1WPdE\",\"searchInput\":\"SearchBar_searchInput__34X3s\",\"nameSection\":\"SearchBar_nameSection__2lk9Y\",\"nameText\":\"SearchBar_nameText__3J_GG\"};","export enum EnvType {\n  Local = 'local',\n  Development = 'development',\n  Production = 'production',\n  Staging = 'staging',\n}\n\ninterface ServerConfig {\n  apiUrl: string;\n}\n\nconst serverEnvironments: {\n  local: ServerConfig;\n  staging: ServerConfig;\n  development: ServerConfig;\n  production: ServerConfig;\n} = {\n  [EnvType.Local]: {\n    apiUrl: 'https://api.covid19api.com',\n  },\n  [EnvType.Development]: {\n    apiUrl: 'https://api.covid19api.com',\n  },\n  [EnvType.Staging]: {\n    apiUrl: 'https://api.covid19api.com',\n  },\n  [EnvType.Production]: {\n    apiUrl: 'https://api.covid19api.com',\n  },\n};\n\n// Node process env variable\nexport const Env: EnvType = process.env.NODE_ENV as EnvType;\n\n// Node process.env.REACT_APP_BUILD\nexport const BuildEnv = process.env.REACT_APP_BUILD;\n\n// Env is development\nexport const __DEV__: boolean = Env === EnvType.Development || BuildEnv === EnvType.Development;\n\n// Env is staging\nexport const __STAG__: boolean = BuildEnv === EnvType.Staging;\n\n// Env is production\nexport const __PROD__: boolean = Env === EnvType.Production;\n\n// Server env variables function\nexport const ServerEnv = () => {\n  if (process.env.REACT_APP_BUILD === EnvType.Production) {\n    // For production build\n    return serverEnvironments[EnvType.Production];\n  }\n\n  if (process.env.REACT_APP_BUILD === EnvType.Staging) {\n    // For staging build\n    return serverEnvironments[EnvType.Staging];\n  }\n\n  if (process.env.REACT_APP_BUILD === EnvType.Development) {\n    // For development build\n    return serverEnvironments[EnvType.Development];\n  }\n\n  // In all other cases return local environment config\n  return serverEnvironments[EnvType.Local];\n};\n","import humps from 'humps';\nimport moment from 'moment';\nimport request from 'umi-request';\nimport { ServerEnv } from '../env';\n\nconst serverEnv = ServerEnv();\n\nexport class ApiService {\n  public static async getSummary() {\n    try {\n      const response = await request(`${serverEnv.apiUrl}/summary`, {\n        method: 'get',\n      });\n      return humps.camelizeKeys(response);\n    } catch (error) {\n      console.log('Service Fail', error);\n      return;\n    }\n  }\n\n  public static async getCountrySummary(slug: string, status: string) {\n    try {\n      const fromDate = moment().startOf('day').subtract(30, 'days').toISOString();\n      const toDate = moment().startOf('day').toISOString();\n      const response = await request(`${serverEnv.apiUrl}/total/country/${slug}/status/${status}`, {\n        method: 'get',\n        params: {\n          from: fromDate,\n          to: toDate,\n        },\n      });\n      return humps.camelizeKeys(response);\n    } catch (error) {\n      console.log('Service Fail', error);\n      return;\n    }\n  }\n}\n","import moment from 'moment';\nimport { DailyReport } from '../models/interfaces';\n\nexport const formatWeekTrendData = (confirmed: any[], deaths: any[]) => {\n  let data: DailyReport[] = [];\n  let i = 1;\n\n  const name = confirmed[0].country;\n  for (i = 1; i < confirmed.length; i++) {\n    data = [\n      ...data,\n      {\n        date: moment(confirmed[i].date).format('DD-MM-YYYY'),\n        confirmed: Math.abs(confirmed[i].cases - confirmed[i - 1].cases),\n        deaths: Math.abs(deaths[i].cases - deaths[i - 1].cases),\n      },\n    ];\n  }\n\n  return [data, name];\n};\n","import { Action, Effects } from './dispatch';\nimport { split } from 'lodash';\nimport { ApiService } from '../services/api.service';\nimport { CountryState } from './interfaces';\nimport { formatWeekTrendData } from '../utils/formatData';\n\nconst initialState: CountryState = {\n  countrySlug: '',\n  countryName: '',\n  sortVisible: true,\n  monthSummary: [],\n};\n\nexport default {\n  namespace: 'country',\n  state: initialState,\n  effects: {\n    *fetchMonthSummary({ payload }: Action, { call, put }: Effects) {\n      const { slug } = payload;\n      try {\n        yield put({ type: 'setSortVisible', payload: false });\n        const countrySlug = split(slug, '/', 3)[2];\n        yield put({ type: 'setCountrySlug', payload: countrySlug });\n        const confirmed = yield call(ApiService.getCountrySummary, countrySlug, 'confirmed');\n        const deaths = yield call(ApiService.getCountrySummary, countrySlug, 'deaths');\n\n        const [result, name] = formatWeekTrendData(confirmed, deaths);\n\n        yield put({ type: 'setCountryName', payload: name });\n        yield put({ type: 'setMonthSummary', payload: result });\n      } catch (error) {\n        console.log('ERROR', error);\n      }\n    },\n\n    *activateSort(action: Action, { put }: Effects) {\n      yield put({ type: 'setSortVisible', payload: true });\n    },\n  },\n  reducers: {\n    setCountrySlug(state: CountryState, { payload }: Action): CountryState {\n      return { ...state, countrySlug: payload };\n    },\n    setCountryName(state: CountryState, { payload }: Action): CountryState {\n      return { ...state, countryName: payload };\n    },\n    setMonthSummary(state: CountryState, { payload }: Action): CountryState {\n      return { ...state, monthSummary: payload };\n    },\n    setSortVisible(state: CountryState, { payload }: Action): CountryState {\n      return { ...state, sortVisible: payload };\n    },\n    setDefault(state: CountryState): CountryState {\n      return { ...state, ...initialState };\n    },\n  },\n};\n","import { forEach, lowerCase, startsWith, orderBy } from 'lodash';\nimport { Action, Effects } from './dispatch';\nimport { ApiService } from '../services/api.service';\nimport { GlobalState } from './interfaces';\n\nconst initialState: GlobalState = {\n  summary: {\n    newConfirmed: 0,\n    totalConfirmed: 0,\n    newDeaths: 0,\n    totalDeaths: 0,\n    newRecovered: 0,\n    totalRecovered: 0,\n  },\n  countries: [],\n  searchResults: [],\n  countrySummary: [],\n  date: '',\n};\n\nexport default {\n  namespace: 'global',\n  state: initialState,\n  effects: {\n    *fetchSummary(action: Action, { call, put }: Effects) {\n      try {\n        const response = yield call(ApiService.getSummary);\n        if (response) {\n          yield put({\n            type: 'setSummary',\n            payload: response.global,\n          });\n          yield put({\n            type: 'setCountries',\n            payload: orderBy(response.countries, ['totalDeaths'], ['desc']),\n          });\n        }\n      } catch (error) {\n        console.log('ERROR', error);\n      }\n    },\n    *sortCountries({ payload }: Action, { put, select }: Effects) {\n      const { key } = payload;\n      try {\n        const { countries } = yield select(({ global }: any): GlobalState => global);\n        yield put({\n          type: 'setCountries',\n          payload: orderBy(countries, [`${key}`], ['desc']),\n        });\n      } catch (error) {\n        console.log('ERROR', error);\n      }\n    },\n    *searchCountry({ payload }: Action, { put, select }: Effects) {\n      const { name } = payload;\n      try {\n        let results: any = [];\n        const { countries } = yield select(({ global }: any): GlobalState => global);\n        forEach(countries, (country) => {\n          if (startsWith(lowerCase(country.country), lowerCase(name))) {\n            results = [...results, country];\n          }\n        });\n        yield put({\n          type: 'setSearchResult',\n          payload: orderBy(results, ['country']),\n        });\n      } catch (error) {\n        console.log('ERROR', error);\n      }\n    },\n    *fetchCountrySummary({ payload }: Action, { call, put }: Effects) {\n      const { slug } = payload;\n      try {\n        const response = yield call(ApiService.getCountrySummary, slug);\n        if (response) {\n          // const { global, countries } = data;\n          yield put({\n            type: 'setCountryResult',\n            payload: response,\n          });\n          // yield put({\n          //   type: 'setCountries',\n          //   payload: orderBy(countries, ['totalDeaths'], ['desc']),\n          // });\n        }\n      } catch (error) {\n        console.log('ERROR', error);\n      }\n    },\n  },\n  reducers: {\n    setSummary(state: GlobalState, { payload }: Action): GlobalState {\n      return { ...state, summary: payload };\n    },\n\n    setCountries(state: GlobalState, { payload }: Action): GlobalState {\n      return { ...state, countries: payload };\n    },\n    setSearchResult(state: GlobalState, { payload }: Action): GlobalState {\n      return { ...state, searchResults: payload };\n    },\n    setCountryResult(state: GlobalState, { payload }: Action): GlobalState {\n      return { ...state, countrySummary: payload };\n    },\n  },\n};\n","import React, { FC } from 'react';\nimport { Card, Layout } from 'antd';\n\nimport styles from './About.module.scss';\n\nexport const About: FC = () => {\n  return (\n    <Layout className={styles.page}>\n      <Card title=\"About\" bordered={false} style={{ width: 300 }}>\n        <p>About the Site</p>\n      </Card>\n      <Card title=\"APIs used\" bordered={false} style={{ width: 300 }}>\n        <p>About the API</p>\n      </Card>\n    </Layout>\n  );\n};\n\nexport default About;\n","import React, { FC, useState, useEffect, useCallback } from 'react';\nimport { Statistic, Table } from 'antd';\nimport { forEach } from 'lodash';\nimport { CountrySummary } from '../models/interfaces';\n\nimport styles from './CountryTable.module.scss';\n\ninterface Props {\n  loading: boolean;\n  countries: CountrySummary[];\n  viewCountryDetails: (slug: string) => void;\n}\n\ninterface TableItem extends CountrySummary {\n  key: string;\n}\n\nconst columns = [\n  {\n    title: 'Country',\n    dataIndex: 'country',\n    key: 'country',\n    render: (text: string, record: TableItem) => (\n      <Statistic\n        valueStyle={{ fontSize: 14 }}\n        prefix={\n          <img\n            src={'https://www.countryflags.io/' + record.countryCode + '/flat/48.png'}\n            loading=\"eager\"\n            width=\"32\"\n            height=\"32\"\n            alt={record.countryCode}\n          />\n        }\n        value={text}\n      />\n    ),\n  },\n  {\n    title: 'New Cases',\n    dataIndex: 'newConfirmed',\n    key: 'newConfirmed',\n    render: (text: string) => <Statistic valueStyle={{ fontSize: 14 }} value={text} />,\n  },\n  {\n    title: 'New Deaths',\n    dataIndex: 'newDeaths',\n    key: 'newDeaths',\n    render: (text: string) => <Statistic valueStyle={{ fontSize: 14 }} value={text} />,\n  },\n  {\n    title: 'Total Cases',\n    dataIndex: 'totalConfirmed',\n    key: 'totalConfirmed',\n    render: (text: string) => <Statistic valueStyle={{ fontSize: 14 }} value={text} />,\n  },\n  {\n    title: 'Total Deaths',\n    dataIndex: 'totalDeaths',\n    key: 'totalDeaths',\n    render: (text: string) => <Statistic valueStyle={{ fontSize: 14 }} value={text} />,\n  },\n];\n\nexport const CountryTable: FC<Props> = (props) => {\n  const { countries, loading, viewCountryDetails } = props;\n  const [tableItems, setTableItems] = useState<TableItem[]>([]);\n\n  const formatTableCB = useCallback(() => {\n    let items: TableItem[] = [];\n\n    forEach(countries, (country) => {\n      items = [...items, { key: `${items.length + 1}`, ...country }];\n    });\n\n    setTableItems(items);\n  }, [countries]);\n\n  useEffect(() => {\n    formatTableCB();\n  }, [formatTableCB]);\n\n  return (\n    <Table\n      className={styles.countryList}\n      columns={columns}\n      dataSource={tableItems}\n      loading={loading}\n      pagination={{\n        position: ['bottomRight'],\n        showLessItems: true,\n        showSizeChanger: false,\n      }}\n      onRow={(record, rowIndex) => {\n        return {\n          onClick: () => {\n            viewCountryDetails(record.slug);\n          },\n        };\n      }}\n    />\n  );\n};\n\nexport default CountryTable;\n","import React, { FC } from 'react';\nimport { Card, Row, Statistic, Typography } from 'antd';\n\nimport styles from './CountryLatestNumbers.module.scss';\n\nconst { Text } = Typography;\ninterface Props {\n  loading: boolean;\n  data: any;\n}\n\nconst CountryLatestNumbers: FC<Props> = ({ loading, data }) => {\n  return (\n    <Card className={styles.item} loading={loading} title={<Text>Latest Numbers</Text>}>\n      <Row className={styles.statItems}>\n        <div className={styles.statItem}>\n          <Statistic title=\"Confirmed\" value={data && data.newConfirmed} valueStyle={{ fontSize: '20px' }} />\n        </div>\n        <div className={styles.statItem}>\n          <Statistic title=\"Deaths\" value={data && data.newDeaths} valueStyle={{ fontSize: '20px' }} />\n        </div>\n      </Row>\n    </Card>\n  );\n};\n\nexport default CountryLatestNumbers;\n","import React, { FC } from 'react';\nimport { Card, Timeline, Typography } from 'antd';\nimport { ClockCircleOutlined } from '@ant-design/icons';\n\nimport styles from './CountryFeed.module.scss';\n\ninterface Props {\n  loading: boolean;\n}\n\nconst { Text } = Typography;\nconst CountryTimeline: FC<Props> = ({ loading }) => {\n  return (\n    <Card className={styles.timeline} loading={loading} title={<Text>Daily Report</Text>}>\n      <Timeline>\n        <Timeline.Item>Feed 1</Timeline.Item>\n        <Timeline.Item>Feed 2</Timeline.Item>\n        <Timeline.Item dot={<ClockCircleOutlined className=\"timeline-clock-icon\" />} color=\"red\">\n          Feed 3\n        </Timeline.Item>\n        <Timeline.Item>Feed 4</Timeline.Item>\n      </Timeline>\n    </Card>\n  );\n};\n\nexport default CountryTimeline;\n","import React, { FC } from 'react';\nimport { Card, Row, Statistic, Typography } from 'antd';\n\nimport styles from './CountryTotalNumbers.module.scss';\n\nconst { Text } = Typography;\ninterface Props {\n  loading: boolean;\n  data: any;\n}\n\nconst CountryTotalNumbers: FC<Props> = ({ loading, data }) => {\n  return (\n    <Card className={styles.item} loading={loading} title={<Text>Total Numbers</Text>}>\n      <Row className={styles.statItems}>\n        <div className={styles.statItem}>\n          <Statistic title=\"Confirmed\" value={data && data.totalConfirmed} valueStyle={{ fontSize: '20px' }} />\n        </div>\n        <div className={styles.statItem}>\n          <Statistic title=\"Deaths\" value={data && data.totalDeaths} valueStyle={{ fontSize: '20px' }} />\n        </div>\n      </Row>\n    </Card>\n  );\n};\n\nexport default CountryTotalNumbers;\n","import React, { FC } from 'react';\nimport { Row, Typography } from 'antd';\nimport { connect } from 'dva';\nimport { Link, routerRedux } from 'dva/router';\nimport {} from '@ant-design/icons';\nimport { GlobalState, CountrySummary } from '../models/interfaces';\nimport { Dispatch } from '../models/dispatch';\n\nimport { SearchBar } from './index';\n\nimport styles from './NavBar.module.scss';\n\nconst { Title } = Typography;\n\ninterface Props {\n  loading: boolean;\n  globalSummary: GlobalState;\n  countries: CountrySummary[];\n  countrySearch: CountrySummary[];\n  lastUpdated: string;\n  sortVisible: boolean;\n  getSummary: () => void;\n  viewCountryDetails: (code: string) => void;\n  filterCountries: (name: string) => void;\n  sortCountries: (key: string) => void;\n}\n\nconst NavBar: FC<Props> = (props) => {\n  return (\n    <Row className={styles.navBar}>\n      <Row className={styles.navTitle}>\n        <Link to=\"/summary\">\n          <Title level={4}>Coronavirus Statistics (COVID-19)</Title>\n        </Link>\n      </Row>\n      <SearchBar\n        countries={props.countrySearch}\n        sortVisible={props.sortVisible}\n        filterCountries={props.filterCountries}\n        viewSelected={props.viewCountryDetails}\n        sortCountries={props.sortCountries}\n      />\n    </Row>\n  );\n};\n\nconst mapStateToProps = ({ global, country, loading }: any) => ({\n  globalSummary: global.summary,\n  countries: global.countries,\n  countrySearch: global.searchResults,\n  lastUpdated: global.date,\n  sortVisible: country.sortVisible,\n  loading: loading.effects['global/fetchSummary'] || loading.effects['global/sortCountries'],\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  getSummary: () => {\n    dispatch({ type: 'global/fetchSummary' });\n  },\n  viewCountryDetails: (slug: string) => {\n    dispatch(routerRedux.push(`/summary/${slug}`));\n  },\n\n  filterCountries: (name: string) => {\n    dispatch({ type: 'global/searchCountry', payload: { name } });\n  },\n\n  sortCountries: (key: string) => {\n    dispatch({ type: 'global/sortCountries', payload: { key } });\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\n","import React, { FC, useState, useEffect } from 'react';\nimport { AutoComplete, Select, Row, Typography } from 'antd';\nimport { CountrySummary } from '../models/interfaces';\n\nimport styles from './SearchBar.module.scss';\n\ninterface Props {\n  countries: CountrySummary[];\n  sortVisible: boolean;\n  filterCountries: (name: string) => void;\n  viewSelected: (slug: string) => void;\n  sortCountries: (key: string) => void;\n}\n\nconst { Option } = AutoComplete;\nconst { Text } = Typography;\n\nconst sortOptions = [\n  { value: 'newConfirmed', text: 'New Cases' },\n  { value: 'newDeaths', text: 'New Deaths' },\n  { value: 'totalConfirmed', text: 'Total Cases' },\n  { value: 'totalDeaths', text: 'Total Deaths' },\n];\n\nconst SearchBar: FC<Props> = ({ countries, sortVisible, filterCountries, sortCountries, viewSelected }) => {\n  const [result, setResult] = useState<CountrySummary[]>([]);\n  const [searchValue, setSearchValue] = useState<string>('');\n  const [sortKey, setSortKey] = useState<string>('');\n\n  useEffect(() => {\n    filterCountries(searchValue);\n  }, [searchValue, filterCountries]);\n\n  useEffect(() => {\n    setResult(countries);\n  }, [countries]);\n\n  useEffect(() => {\n    sortCountries(sortKey);\n  }, [sortKey, sortCountries]);\n\n  const handleSearch = (value: string) => {\n    setSearchValue(value);\n  };\n\n  const handleSort = (value: string) => {\n    setSortKey(value);\n  };\n\n  const handleSelected = (value: string) => {\n    const country = countries.find((element) => element.country === value);\n    if (country) {\n      viewSelected(country.slug);\n    }\n  };\n  return (\n    <Row className={styles.searchSection}>\n      <Row className={styles.searchBar}>\n        <AutoComplete\n          className={styles.searchInput}\n          onSearch={handleSearch}\n          onSelect={(value: string) => handleSelected(value)}\n          placeholder=\"Search Country\"\n        >\n          {result &&\n            result.map((result) => (\n              <Option key={result.country} value={result.country}>\n                <div className={styles.nameSection}>\n                  <div className={styles.nameText}>{result.country}</div>\n                  <img\n                    src={'https://www.countryflags.io/' + result.countryCode + '/flat/48.png'}\n                    loading=\"eager\"\n                    width=\"28\"\n                    height=\"28\"\n                    alt={result.countryCode}\n                  />\n                </div>\n              </Option>\n            ))}\n        </AutoComplete>\n      </Row>\n      {sortVisible && (\n        <Row className={styles.sortSection}>\n          <Text className={styles.sortText}>Sort By: </Text>\n          <Select className={styles.select} defaultValue={sortOptions[3].value} onChange={handleSort}>\n            {sortOptions.map((sortOption) => (\n              <Option key={sortOption.value} value={sortOption.value}>\n                {sortOption.text}\n              </Option>\n            ))}\n          </Select>\n        </Row>\n      )}\n    </Row>\n  );\n};\n\nexport default SearchBar;\n","import React, { FC } from 'react';\nimport { Card, Typography } from 'antd';\nimport { Area, AreaChart, ResponsiveContainer, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\nimport { DailyReport } from '../models/interfaces';\n\nimport styles from './MonthTrendChart.module.scss';\n\ninterface Props {\n  loading: boolean;\n  monthSummary: DailyReport[];\n}\n\nconst { Text } = Typography;\n\nconst MonthTrendChart: FC<Props> = ({ loading, monthSummary }) => {\n  return (\n    <Card className={styles.chart} loading={loading} title={<Text>Last 30 Days</Text>}>\n      <ResponsiveContainer width=\"100%\" height={600}>\n        <AreaChart width={600} height={250} data={monthSummary} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n          <defs>\n            <linearGradient id=\"colorConf\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#eeb902\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#eeb902\" stopOpacity={0} />\n            </linearGradient>\n            <linearGradient id=\"colorReco\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#317b22\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#317b22\" stopOpacity={0} />\n            </linearGradient>\n            <linearGradient id=\"colorDea\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#f25c54\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#f25c54\" stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          <XAxis dataKey=\"date\" />\n          <YAxis />\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip />\n          <Area type=\"monotone\" dataKey=\"confirmed\" stroke=\"#eeb902\" fillOpacity={1} fill=\"url(#colorConf)\" />\n          <Area type=\"monotone\" dataKey=\"recovered\" stroke=\"#317b22\" fillOpacity={1} fill=\"url(#colorReco)\" />\n          <Area type=\"monotone\" dataKey=\"deaths\" stroke=\"#f25c54\" fillOpacity={1} fill=\"url(#colorDea)\" />\n        </AreaChart>\n      </ResponsiveContainer>\n    </Card>\n  );\n};\n\nexport default MonthTrendChart;\n","import React, { FC, useEffect } from 'react';\nimport { Layout } from 'antd';\nimport { connect } from 'dva';\nimport { routerRedux } from 'dva/router';\nimport { Dispatch } from '../models/dispatch';\n\nimport { CountryTable } from '../components';\nimport { GlobalState, CountrySummary } from '../models/interfaces';\n\nimport styles from './Home.module.scss';\n\ninterface Props {\n  loading: boolean;\n  globalSummary: GlobalState;\n  countries: CountrySummary[];\n  countrySearch: CountrySummary[];\n  lastUpdated: string;\n  getSummary: () => void;\n  viewCountryDetails: (code: string) => void;\n  filterCountries: (name: string) => void;\n  sortCountries: (key: string) => void;\n  enableSort: () => void;\n}\n\nexport const Home: FC<Props> = (props) => {\n  const { getSummary, enableSort } = props;\n\n  useEffect(() => {\n    getSummary();\n    enableSort();\n  }, [getSummary, enableSort]);\n\n  return (\n    <Layout className={styles.page}>\n      <CountryTable countries={props.countries} loading={props.loading} viewCountryDetails={props.viewCountryDetails} />\n    </Layout>\n  );\n};\n\nconst mapStateToProps = ({ global, loading }: any) => ({\n  globalSummary: global.summary,\n  countries: global.countries,\n  countrySearch: global.searchResults,\n  lastUpdated: global.date,\n  loading: loading.effects['global/fetchSummary'] || loading.effects['global/sortCountries'],\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  getSummary: () => {\n    dispatch({ type: 'global/fetchSummary' });\n  },\n  viewCountryDetails: (slug: string) => {\n    dispatch(routerRedux.push(`/summary/${slug}`));\n  },\n  filterCountries: (name: string) => {\n    dispatch({ type: 'global/searchCountry', payload: { name } });\n  },\n  enableSort: () => {\n    dispatch({ type: 'country/activateSort', payload: {} });\n  },\n  sortCountries: (key: string) => {\n    dispatch({ type: 'global/sortCountries', payload: { key } });\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React, { FC, useEffect, useState } from 'react';\nimport { Layout, Row, Typography } from 'antd';\nimport { connect } from 'dva';\nimport { Dispatch } from '../models/dispatch';\nimport { CountrySummary, DailyReport } from '../models/interfaces';\nimport { CountryLatestNumbers, CountryTotalNumbers, MonthTrendChart } from '../components';\n\nimport styles from './Country.module.scss';\n\ninterface Props {\n  slug: string;\n  countryName: string;\n  monthSummary: DailyReport[];\n  countryUrl: string;\n  countries: CountrySummary[];\n  loading: boolean;\n  getMonthSummary: (slug: string) => void;\n}\n\nconst { Title } = Typography;\n\nconst Country: FC<Props> = ({ slug, countryName, countryUrl, getMonthSummary, loading, monthSummary, countries }) => {\n  // const [slug, setSlug] = useState(split(countryUrl, '/', 3)[2]);\n  const [countryInfo, setCountryInfo] = useState<any>();\n  useEffect(() => {\n    if (countryUrl) {\n      getMonthSummary(countryUrl);\n    }\n  }, [countryUrl, getMonthSummary]);\n\n  // useEffect(() => {\n  //   const selectedSlug = split(countryUrl, '/', 3)[2];\n  //   if (selectedSlug !== slug) {\n  //     getMonthSummary(selectedSlug);\n  //   }\n  // }, [countryUrl, slug, getMonthSummary]);\n\n  useEffect(() => {\n    if (slug && countries.length) {\n      const country = countries.find((element) => element.slug === slug);\n      console.log('COUNTRY', country);\n      setCountryInfo(country);\n    }\n  }, [slug, countries]);\n\n  return (\n    <Layout className={styles.page}>\n      <div className={styles.detailSection}>\n        <div className={styles.infoSection}>\n          <Row className={styles.title}>\n            <Title level={4}>{countryName}</Title>\n            <div className={styles.flag}>\n              {countryInfo && (\n                <img\n                  src={'https://www.countryflags.io/' + countryInfo.countryCode + '/flat/64.png'}\n                  loading=\"eager\"\n                  width=\"124\"\n                  height=\"124\"\n                  alt={countryInfo.countryCode}\n                />\n              )}\n            </div>\n          </Row>\n        </div>\n        <div className={styles.numbersSection}>\n          <Row className={styles.details}>\n            <Row className={styles.numbers}>\n              <CountryLatestNumbers loading={loading} data={countryInfo} />\n              <CountryTotalNumbers loading={loading} data={countryInfo} />\n            </Row>\n          </Row>\n        </div>\n      </div>\n      <Row className={styles.trend}>\n        <MonthTrendChart loading={loading} monthSummary={monthSummary} />\n      </Row>\n    </Layout>\n  );\n};\n\nconst mapStateToProps = ({ country, global, loading, routing }: any) => ({\n  slug: country.countrySlug,\n  countryName: country.countryName,\n  monthSummary: country.monthSummary,\n  countries: global.countries,\n  countryUrl: routing.location.pathname,\n  loading: loading.effects['country/fetchMonthSummary'],\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  getMonthSummary: (slug: string) => {\n    dispatch({ type: 'global/fetchSummary' });\n    dispatch({ type: 'country/fetchMonthSummary', payload: { slug } });\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Country);\n","import React, { FC } from 'react';\nimport { Layout } from 'antd';\nimport { connect } from 'dva';\nimport { Redirect, Route, routerRedux, Switch } from 'dva/router';\nimport { Dispatch } from './models/dispatch';\n\nimport About from './pages/About';\nimport Home from './pages/Home';\nimport Country from './pages/Country';\nimport NavBar from './components/NavBar';\n\nimport styles from './App.module.scss';\n\ninterface Props {\n  app: any;\n  history: any;\n  global: any;\n}\n\nconst { Header, Content } = Layout;\nconst { ConnectedRouter } = routerRedux;\n\nconst App: FC<Props> = ({ history }) => {\n  return (\n    <ConnectedRouter history={history}>\n      <Layout className={styles.container}>\n        <Header style={{ position: 'fixed', zIndex: 1, width: '100%', padding: 0 }}>\n          <NavBar />\n        </Header>\n        <Content className={styles.content}>\n          <Switch>\n            <Route exact path=\"/\" render={() => <Redirect to=\"/summary\" push />} />\n            <Route exact path=\"/summary\" render={() => <Home />} />\n            <Route exact path=\"/summary/:slug\" render={() => <Country />} />\n            <Route exact path=\"/about\" render={() => <About />} />\n          </Switch>\n        </Content>\n      </Layout>\n    </ConnectedRouter>\n  );\n};\n\nconst mapStateToProps = ({ global }: any) => ({ global });\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import dva, { onActionFunc } from 'dva';\nimport createLoading from 'dva-loading';\nimport { createBrowserHistory } from 'history';\nimport React from 'react';\nimport { createLogger } from 'redux-logger';\nimport { __DEV__ } from './env';\nimport { Global, Country } from './models';\nimport App from './App';\n\nimport './index.scss';\n\n// Dva middleware\nconst middleware: onActionFunc[] = [];\n\n// Only development env need to have redux logger\nif (__DEV__) {\n  middleware.push(createLogger());\n}\n\nconst app: any = dva({\n  history: createBrowserHistory(),\n\n  onError(error: any) {\n    // Catch redux action errors\n    error.preventDefault();\n    console.error(error.message);\n  },\n\n  onAction: middleware,\n});\n\napp.use(createLoading());\n\napp.router((props: any) => <App {...props} />);\n\n// Register dva global model\napp.model(Global);\napp.model(Country);\n\napp.start('#root');\n"],"sourceRoot":""}